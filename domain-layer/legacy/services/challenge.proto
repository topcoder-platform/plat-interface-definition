syntax = "proto3";

package topcoder.domain.service.legacy_challenge_service;

import "common/common.proto";
import "domain-layer/legacy/challenge.proto";

service LegacyChallenge {
  rpc CheckExists(topcoder.domain.legacy_challenge.LegacyChallengeId)
      returns (topcoder.common.CheckExistsResult);

  rpc Create(topcoder.domain.legacy_challenge.CreateChallengeInput)
      returns (topcoder.common.CreateResult);

  rpc Update(topcoder.domain.legacy_challenge.UpdateChallengeInput)
      returns (topcoder.common.UpdateResult);

  rpc Get(topcoder.domain.legacy_challenge.LegacyChallengeId)
      returns (topcoder.domain.legacy_challenge.LegacyChallenge);

  // This is a necessary indirection (challenge-api -> domain-challenge -> acl)
  // When we have a proper review API in place, these requests can go to
  // review-api or domain-review directly.
  rpc GetPhaseFacts(topcoder.common.PhaseFactRequest)
      returns (topcoder.common.PhaseFactResponse);
}
