syntax = "proto3";

package topcoder.domain.service.legacy_challenge_service;

import "common/common.proto";
import "domain-layer/legacy/challenge.proto";
import "google/protobuf/empty.proto";

service LegacyChallenge {
  rpc CheckExists(topcoder.domain.legacy_challenge.LegacyChallengeId)
      returns (topcoder.common.CheckExistsResult);

  rpc Lookup(topcoder.common.LookupCriteria)
      returns (topcoder.domain.legacy_challenge.LegacyChallengeList);

  rpc Create(topcoder.domain.legacy_challenge.CreateChallengeInput)
      returns (topcoder.common.CreateResult);

  rpc Update(topcoder.domain.legacy_challenge.UpdateChallengeInput)
      returns (topcoder.common.UpdateResult);

  rpc Get(topcoder.domain.legacy_challenge.LegacyChallengeId)
      returns (topcoder.domain.legacy_challenge.LegacyChallenge);

  rpc Activate(topcoder.domain.legacy_challenge.LegacyChallengeId)
      returns (google.protobuf.Empty);

  rpc CloseChallenge(topcoder.domain.legacy_challenge.CloseChallengeInput)
      returns (topcoder.domain.legacy_challenge.LegacyChallenge);
}
